// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: fns.proto

package mc_go_fns_proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetInnReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetInnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInnReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetInnReqMultiError, or nil
// if none found.
func (m *GetInnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFirstName()) < 1 {
		err := GetInnReqValidationError{
			field:  "FirstName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMiddleName()) < 1 {
		err := GetInnReqValidationError{
			field:  "MiddleName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLastName()) < 1 {
		err := GetInnReqValidationError{
			field:  "LastName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDocCode()) < 1 {
		err := GetInnReqValidationError{
			field:  "DocCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDocNumber()) < 2 {
		err := GetInnReqValidationError{
			field:  "DocNumber",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetInnReqMultiError(errors)
	}
	return nil
}

// GetInnReqMultiError is an error wrapping multiple validation errors returned
// by GetInnReq.ValidateAll() if the designated constraints aren't met.
type GetInnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInnReqMultiError) AllErrors() []error { return m }

// GetInnReqValidationError is the validation error returned by
// GetInnReq.Validate if the designated constraints aren't met.
type GetInnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInnReqValidationError) ErrorName() string { return "GetInnReqValidationError" }

// Error satisfies the builtin error interface
func (e GetInnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInnReqValidationError{}

// Validate checks the field values on GetInnRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetInnRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInnRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetInnRspMultiError, or nil
// if none found.
func (m *GetInnRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInnRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Inn

	if len(errors) > 0 {
		return GetInnRspMultiError(errors)
	}
	return nil
}

// GetInnRspMultiError is an error wrapping multiple validation errors returned
// by GetInnRsp.ValidateAll() if the designated constraints aren't met.
type GetInnRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInnRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInnRspMultiError) AllErrors() []error { return m }

// GetInnRspValidationError is the validation error returned by
// GetInnRsp.Validate if the designated constraints aren't met.
type GetInnRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInnRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInnRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInnRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInnRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInnRspValidationError) ErrorName() string { return "GetInnRspValidationError" }

// Error satisfies the builtin error interface
func (e GetInnRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInnRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInnRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInnRspValidationError{}

// Validate checks the field values on ErrorRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorRspMultiError, or nil
// if none found.
func (m *ErrorRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Text

	if len(errors) > 0 {
		return ErrorRspMultiError(errors)
	}
	return nil
}

// ErrorRspMultiError is an error wrapping multiple validation errors returned
// by ErrorRsp.ValidateAll() if the designated constraints aren't met.
type ErrorRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorRspMultiError) AllErrors() []error { return m }

// ErrorRspValidationError is the validation error returned by
// ErrorRsp.Validate if the designated constraints aren't met.
type ErrorRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorRspValidationError) ErrorName() string { return "ErrorRspValidationError" }

// Error satisfies the builtin error interface
func (e ErrorRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorRspValidationError{}
