// Code generated by protoc-gen-go-micro. DO NOT EDIT.
// protoc-gen-go-micro version: v3.5.3
// source: fns.proto

package mc_go_fns_proto

import (
	context "context"
	v3 "go.unistack.org/micro-client-http/v3"
	v31 "go.unistack.org/micro-server-http/v3"
	api "go.unistack.org/micro/v3/api"
	client "go.unistack.org/micro/v3/client"
	server "go.unistack.org/micro/v3/server"
	http "net/http"
)

type innServiceClient struct {
	c    client.Client
	name string
}

func NewInnServiceClient(name string, c client.Client) InnServiceClient {
	return &innServiceClient{c: c, name: name}
}

func (c *innServiceClient) GetInn(ctx context.Context, req *GetInnReq, opts ...client.CallOption) (*GetInnRsp, error) {
	errmap := make(map[string]interface{}, 1)
	errmap["default"] = &ErrorRsp{}
	opts = append(opts,
		v3.ErrorMap(errmap),
	)
	opts = append(opts,
		v3.Method(http.MethodPost),
		v3.Path("/getinn"),
		v3.Body("*"),
	)
	opts = append(opts,
		v3.Header("Authorization", "true"),
	)
	rsp := &GetInnRsp{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "InnService.GetInn", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

type innServiceServer struct {
	InnServiceServer
}

func (h *innServiceServer) GetInn(ctx context.Context, req *GetInnReq, rsp *GetInnRsp) error {
	v31.FillRequest(ctx, req,
		v31.Header("Authorization", "true"),
	)
	return h.InnServiceServer.GetInn(ctx, req, rsp)
}

func RegisterInnServiceServer(s server.Server, sh InnServiceServer, opts ...server.HandlerOption) error {
	type innService interface {
		GetInn(ctx context.Context, req *GetInnReq, rsp *GetInnRsp) error
	}
	type InnService struct {
		innService
	}
	h := &innServiceServer{sh}
	var nopts []server.HandlerOption
	for _, endpoint := range InnServiceEndpoints {
		nopts = append(nopts, api.WithEndpoint(&endpoint))
	}
	return s.Handle(s.NewHandler(&InnService{h}, append(nopts, opts...)...))
}
